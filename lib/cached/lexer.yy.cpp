
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define mzn_yy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer mzn_yy_create_buffer
#endif

#ifdef yy_delete_buffer
#define mzn_yy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer mzn_yy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define mzn_yy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer mzn_yy_scan_buffer
#endif

#ifdef yy_scan_string
#define mzn_yy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string mzn_yy_scan_string
#endif

#ifdef yy_scan_bytes
#define mzn_yy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes mzn_yy_scan_bytes
#endif

#ifdef yy_init_buffer
#define mzn_yy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer mzn_yy_init_buffer
#endif

#ifdef yy_flush_buffer
#define mzn_yy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer mzn_yy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define mzn_yy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state mzn_yy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define mzn_yy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer mzn_yy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define mzn_yypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state mzn_yypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define mzn_yypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state mzn_yypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define mzn_yyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack mzn_yyensure_buffer_stack
#endif

#ifdef yylex
#define mzn_yylex_ALREADY_DEFINED
#else
#define yylex mzn_yylex
#endif

#ifdef yyrestart
#define mzn_yyrestart_ALREADY_DEFINED
#else
#define yyrestart mzn_yyrestart
#endif

#ifdef yylex_init
#define mzn_yylex_init_ALREADY_DEFINED
#else
#define yylex_init mzn_yylex_init
#endif

#ifdef yylex_init_extra
#define mzn_yylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra mzn_yylex_init_extra
#endif

#ifdef yylex_destroy
#define mzn_yylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy mzn_yylex_destroy
#endif

#ifdef yyget_debug
#define mzn_yyget_debug_ALREADY_DEFINED
#else
#define yyget_debug mzn_yyget_debug
#endif

#ifdef yyset_debug
#define mzn_yyset_debug_ALREADY_DEFINED
#else
#define yyset_debug mzn_yyset_debug
#endif

#ifdef yyget_extra
#define mzn_yyget_extra_ALREADY_DEFINED
#else
#define yyget_extra mzn_yyget_extra
#endif

#ifdef yyset_extra
#define mzn_yyset_extra_ALREADY_DEFINED
#else
#define yyset_extra mzn_yyset_extra
#endif

#ifdef yyget_in
#define mzn_yyget_in_ALREADY_DEFINED
#else
#define yyget_in mzn_yyget_in
#endif

#ifdef yyset_in
#define mzn_yyset_in_ALREADY_DEFINED
#else
#define yyset_in mzn_yyset_in
#endif

#ifdef yyget_out
#define mzn_yyget_out_ALREADY_DEFINED
#else
#define yyget_out mzn_yyget_out
#endif

#ifdef yyset_out
#define mzn_yyset_out_ALREADY_DEFINED
#else
#define yyset_out mzn_yyset_out
#endif

#ifdef yyget_leng
#define mzn_yyget_leng_ALREADY_DEFINED
#else
#define yyget_leng mzn_yyget_leng
#endif

#ifdef yyget_text
#define mzn_yyget_text_ALREADY_DEFINED
#else
#define yyget_text mzn_yyget_text
#endif

#ifdef yyget_lineno
#define mzn_yyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno mzn_yyget_lineno
#endif

#ifdef yyset_lineno
#define mzn_yyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno mzn_yyset_lineno
#endif

#ifdef yyget_column
#define mzn_yyget_column_ALREADY_DEFINED
#else
#define yyget_column mzn_yyget_column
#endif

#ifdef yyset_column
#define mzn_yyset_column_ALREADY_DEFINED
#else
#define yyset_column mzn_yyset_column
#endif

#ifdef yywrap
#define mzn_yywrap_ALREADY_DEFINED
#else
#define yywrap mzn_yywrap
#endif

#ifdef yyget_lval
#define mzn_yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval mzn_yyget_lval
#endif

#ifdef yyset_lval
#define mzn_yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval mzn_yyset_lval
#endif

#ifdef yyget_lloc
#define mzn_yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc mzn_yyget_lloc
#endif

#ifdef yyset_lloc
#define mzn_yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc mzn_yyset_lloc
#endif

#ifdef yyalloc
#define mzn_yyalloc_ALREADY_DEFINED
#else
#define yyalloc mzn_yyalloc
#endif

#ifdef yyrealloc
#define mzn_yyrealloc_ALREADY_DEFINED
#else
#define yyrealloc mzn_yyrealloc
#endif

#ifdef yyfree
#define mzn_yyfree_ALREADY_DEFINED
#else
#define yyfree mzn_yyfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define mzn_yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 183
#define YY_END_OF_BUFFER 184
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[506] =
    {   0,
        0,    0,  170,  170,  170,  170,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  184,  182,    3,    2,
      182,  169,  182,   23,  182,  166,  103,   99,   33,  101,
       33,  105,   29,   29,   33,  113,  123,  117,  143,   19,
      182,   21,  108,   37,  182,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,   33,  182,  182,  182,    1,  170,
      180,  179,  177,  179,    1,  178,  179,   16,   18,   17,
        1,    6,    8,    7,    1,   11,   13,   12,    1,  167,
      168,  125,    0,  165,   23,    0,    0,  144,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  110,  127,   34,   14,
      135,    0,   29,    0,    0,    0,   36,  129,  115,  112,
      121,  119,  143,   20,  133,    0,  145,  145,    0,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,   56,   61,  143,  143,  143,  143,  143,  143,   72,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
       22,  138,  137,  140,  139,  152,    0,    0,    0,    0,
        0,  170,  174,  173,  175,  173,  171,  172,  176,   16,

       15,    6,    5,   11,   10,  164,  165,    0,  104,  100,
        0,  102,    0,    0,  106,    0,  114,    0,    0,  124,
        0,  118,    0,    0,  109,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    4,   30,    0,   32,    0,   27,
       28,  131,  107,  145,  145,    0,  181,   38,   40,  143,
      143,  143,  143,  143,  143,   46,  143,  143,  143,  143,
      143,  143,  143,  143,   63,   64,  143,  143,  143,   68,
       70,   74,  143,   75,  143,  143,  143,   79,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,   94,
      143,   97,    0,  153,  154,  155,  146,  147,  148,  151,

      156,  157,  162,  161,  158,  159,  160,  149,  150,  164,
      126,  111,  128,   35,  136,  130,    0,  116,  122,  120,
      134,    0,    0,   62,    0,    0,    0,    0,    0,    0,
        0,    0,  141,    9,    0,    0,    0,    0,  145,  143,
      143,   42,   43,  143,  143,   48,   50,  143,   53,  143,
      143,  143,  143,  143,  143,   65,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,   88,   89,   24,
      143,   91,  143,  143,  143,    0,  132,    0,   47,    0,
       69,   71,    0,    0,    0,    0,   98,    0,   31,    0,
        0,   26,  145,  143,   41,  143,  143,  143,   52,   25,

       54,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,   80,  143,  143,  143,  143,   90,   92,  143,   96,
      163,   49,    0,    0,    0,    0,    0,    0,   26,  145,
      143,  143,  143,   51,  143,  143,  143,  143,  143,  143,
       73,  143,   77,  143,   81,   82,  143,  143,  143,    0,
        0,    0,    0,   93,  145,  143,  143,   45,  143,   57,
      143,  143,  143,  143,  143,   78,  143,   86,  143,    0,
       83,    0,    0,  145,  143,  143,   55,   58,  143,   66,
       67,  143,   84,  143,    0,    0,   87,  145,  143,  143,
       59,   76,  143,    0,   85,  142,   39,   44,  143,   60,

      143,  143,  143,   95,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    8,    1,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   21,   21,   22,   14,   23,
       24,   25,    1,    1,   26,   26,   26,   26,   27,   26,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   29,
       28,   28,   28,   28,   28,   28,   28,   30,   28,   28,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   28,   47,   48,   49,
       50,   51,   28,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   14,   61,   14,   62,    1,   63,   64,    1,
       65,    1,    1,   66,   67,   68,   69,   70,    1,    1,
        1,    1,    1,   71,    1,   72,    1,   73,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   74,    1,   75,
        1,    1,    1,   76,   77,    1,   78,   79,   80,   81,
        1,   82,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   83,    1,   84,    1,    1,    1,
        1,    1,    1,   85,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   86,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[88] =
    {   0,
        1,    1,    2,    3,    1,    4,    5,    1,    1,    1,
        1,    6,    1,    1,    1,    7,    1,    8,    8,    8,
        8,    1,    1,    1,    1,    9,    9,   10,    9,   10,
        1,    4,    1,    1,   11,   12,    9,    9,    9,    9,
        9,    9,   10,   10,   10,   10,   10,   10,   10,   10,
        9,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3
    } ;

static const flex_int16_t yy_base[527] =
    {   0,
        0,    0,   85,   89,   93,   97,   95,   99,  101,  102,
      103,  106,  881,  880,  879,  878,  888,  893,  893,  893,
      863,  893,  879,    0,  189,  893,  893,  872,  893,  859,
      867,   78,  112,  125,  860,  111,  857,  856,    0,  818,
      861,  893,  862,  826,    0,   67,  825,   87,   67,   73,
      101,   85,  106,  113,  824,  113,  117,  832,  124,  156,
      823,  834,  826,  819,  835,  204,  785,  156,  893,    0,
      893,  893,  893,  186,  893,  893,  221,    0,  893,  849,
        0,    0,  893,  848,    0,    0,  893,  847,    0,  893,
      893,  893,    0,    0,    0,  178,  224,  893,  200,  230,

      227,  241,  232,  245,  252,  254,  846,  236,  240,  249,
      256,  257,  258,  262,  265,  290,  893,  893,  893,  850,
      893,  300,  307,  317,  323,  273,  893,  836,  893,  893,
      893,  893,    0,  893,  893,  841,    0,  821,  822,  100,
      805,  806,  802,  805,  811,  115,  799,  120,  804,  800,
      800,    0,  241,  794,  794,  788,  796,  804,  789,    0,
      788,  787,  788,  798,  799,  783,  782,  788,  782,  249,
      785,  779,  790,  775,  778,  777,  782,  774,  784,  772,
      893,  893,  893,  893,  893,  893,  739,  237,  303,  270,
      285,    0,  893,  893,  893,  893,  893,  893,  893,    0,

      893,    0,  893,    0,  893,    0,    0,  292,  893,  893,
      322,  893,  324,  344,  893,  813,  893,  348,  346,  893,
      358,  893,  360,  812,  893,  361,  365,  366,  370,  363,
      377,  376,  378,  379,  808,  408,  413,  418,  424,  389,
      428,  893,  893,    0,  773,  782,  893,  767,    0,  779,
      768,  773,  760,  775,  769,    0,  769,  764,  760,  754,
      769,  766,  757,  758,  761,    0,  747,  755,  754,    0,
        0,    0,  747,    0,  757,  746,  750,    0,  738,  748,
      739,  750,  750,  735,  739,  746,  739,  744,  734,  738,
      730,    0,  696,  893,  893,  893,  893,  893,  893,  893,

      893,  893,  893,  893,  893,  893,  893,  893,  893,    0,
      893,  893,  893,  893,  893,  893,  380,  893,  893,  893,
      893,  443,  390,  893,  445,  391,  444,  446,  447,  449,
      448,  450,  893,  893,  482,  148,  152,  491,  739,  725,
      719,    0,    0,  723,  721,    0,  730,  732,    0,  732,
      718,  717,  715,  720,  716,    0,  689,  685,  670,  676,
      661,  656,  658,  649,  656,  626,  632,    0,    0,    0,
      624,    0,  612,  623,  618,  525,  893,  451,  893,  461,
      893,  893,  464,  462,  475,  459,  893,  497,  503,  512,
      516,  520,  568,  569,    0,  552,  556,  560,    0,    0,

        0,  556,  560,  554,  545,  552,  551,  541,  555,  553,
      550,    0,  543,  531,  525,  535,    0,    0,  527,    0,
      893,  893,  510,  517,  519,  520,  458,  525,  535,  521,
      520,  532,  513,    0,  515,  518,  494,  446,  414,  412,
        0,  404,    0,  361,    0,    0,  375,  373,  359,  538,
      460,  541,  548,  893,  362,  359,  351,    0,  345,    0,
      332,  320,  317,  299,  275,    0,  262,    0,  277,  549,
      893,  551,  552,  248,  246,  233,    0,    0,  225,    0,
        0,  214,    0,  194,  555,  557,  893,  166,  142,  131,
        0,    0,  132,  559,  893,    0,    0,    0,  128,  893,

       90,   71,   54,    0,  893,  609,  621,  633,  645,  653,
      663,  675,  680,  683,  685,  695,  707,  719,  731,  735,
      738,  742,  746,  751,  756,  758
    } ;

static const flex_int16_t yy_def[527] =
    {   0,
      505,    1,  506,  506,  506,  506,  507,  507,  508,  508,
      509,  509,    1,    1,    1,    1,  505,  505,  505,  505,
      505,  505,  510,  511,  512,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  513,  505,
      505,  505,  505,  514,  515,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  505,  505,  505,  505,  505,  516,
      505,  505,  505,  505,  505,  505,  505,  517,  505,  505,
      517,  518,  505,  505,  518,  519,  505,  505,  519,  505,
      505,  505,  520,  521,  511,  512,  512,  505,  512,  512,

      512,  512,  512,  512,  512,  512,  505,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  513,  505,  505,  505,  522,  522,  523,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  516,  505,  505,  505,  505,  505,  505,  505,  517,

      505,  518,  505,  519,  505,  524,  521,  512,  505,  505,
      512,  505,  512,  512,  505,  505,  505,  512,  512,  505,
      512,  505,  512,  505,  505,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  505,  505,  505,  505,  505,  525,
      505,  505,  505,  522,  522,  523,  505,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  505,  505,  505,  505,  505,  505,  505,  505,

      505,  505,  505,  505,  505,  505,  505,  505,  505,  524,
      505,  505,  505,  505,  505,  505,  512,  505,  505,  505,
      505,  512,  512,  505,  512,  512,  512,  512,  512,  512,
      512,  512,  505,  505,  505,  526,  526,  505,  522,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  505,  505,  512,  505,  512,
      505,  505,  512,  512,  512,  512,  505,  505,  505,  505,
      505,  505,  522,  513,  513,  513,  513,  513,  513,  513,

      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      505,  505,  512,  512,  512,  512,  512,  505,  505,  522,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  512,
      512,  512,  512,  505,  522,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  512,
      505,  512,  512,  522,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  512,  512,  505,  522,  513,  513,
      513,  513,  513,  512,  505,  522,  513,  513,  513,  505,

      513,  513,  513,  513,    0,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505
    } ;

static const flex_int16_t yy_nxt[981] =
    {   0,
       18,   19,   20,   19,   21,   22,   23,   24,   25,   26,
       18,   27,   28,   29,   30,   31,   32,   33,   34,   34,
       34,   35,   36,   37,   38,   39,   39,   39,   39,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   39,   39,   52,   39,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   39,   39,
       65,   66,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   67,   68,   69,   71,   72,  120,
       73,   71,   72,  504,   73,   71,   72,   79,   76,   71,

       72,   79,   76,   83,   83,   87,   80,  145,   87,  121,
       80,  146,   84,   84,   88,  140,   74,   88,  141,  147,
       74,  148,  503,  143,   77,  128,  152,  122,   77,  123,
      123,  123,  123,  153,  129,  130,  144,  149,  124,  502,
      122,  125,  123,  123,  123,  123,  154,  150,  248,  156,
      155,  124,  124,  163,  160,  151,  255,  157,  249,  258,
      166,  126,  158,  161,  167,  124,  501,  162,  164,  125,
      256,   75,  499,  168,  259,   75,  390,  169,  170,   75,
      390,   81,  171,   75,  498,   81,   98,   85,   85,   89,
      497,  193,   89,   97,  194,  195,  172,   98,  390,  173,

       99,  100,  390,  101,  102,  103,  496,  174,  209,  505,
      175,  104,  105,  106,  176,  182,  183,  196,  184,  187,
      107,  188,  108,  189,  190,  191,  193,  185,  109,  194,
      199,  505,   98,  110,  197,  212,  111,  112,  210,  198,
      215,  113,  211,  114,  225,  493,  115,  208,   98,   98,
      116,  213,  196,  217,  492,  505,  214,   98,  505,  218,
      220,  505,  222,  216,   98,   98,   98,  505,  219,  197,
       98,  505,  505,   98,  198,  221,  505,  223,  491,  263,
      505,  490,  264,  505,  226,  505,  281,  505,  505,  505,
      241,  241,  241,  505,  265,  489,  505,  227,   98,  282,

      311,  234,  234,  488,  234,  228,  229,  294,  295,  296,
      232,  484,  230,  234,  233,  483,  231,  236,  236,  236,
      236,  505,  122,  505,  123,  123,  123,  123,  482,  237,
      312,  237,  313,  124,  238,  238,  238,  238,  239,  481,
      240,  240,  240,  240,  305,  306,  307,  124,  240,  240,
      308,  309,  314,  505,  318,  505,  316,  480,  479,  240,
      240,  240,  240,  240,  240,  297,  319,  298,  320,   98,
      299,   98,  317,  324,   98,  505,  300,  505,   98,  505,
      301,  302,  303,  304,   98,   98,   98,  333,  377,  505,
      478,  505,  505,  477,  505,  476,  505,  505,  379,  381,

      328,  505,  322,  475,  337,  326,  474,  505,  505,  505,
      505,  505,  469,  329,  468,  467,  323,  338,  325,  466,
      331,  505,  505,  327,  330,  236,  236,  236,  236,  332,
      238,  238,  238,  238,  335,  238,  238,  238,  238,  338,
      465,  336,  336,  336,  336,  241,  241,  241,  335,  336,
      336,   98,  382,   98,   98,   98,   98,   98,  387,  422,
      336,  336,  336,  336,  336,  336,  454,   98,  471,   98,
       98,  464,   98,  463,  505,  505,  505,  505,  505,  505,
      505,  505,  505,   98,  378,  380,  462,  384,  385,  505,
      505,  505,  505,  505,  388,  505,  388,  386,  383,  389,

      389,  389,  389,  391,  424,  391,  505,  427,  392,  392,
      392,  392,  423,  425,  389,  389,  389,  389,   98,  426,
      389,  389,  389,  389,  428,   98,  428,   98,   98,  429,
      429,  429,  429,  392,  392,  392,  392,  392,  392,  392,
      392,  505,  429,  429,  429,  429,   98,  461,  505,   98,
      505,  505,  429,  429,  429,  429,   98,   98,  460,   98,
      487,  453,  450,   98,  459,  495,  458,  500,  457,  505,
      451,  452,  505,  456,  455,  449,  448,  447,  470,  505,
      505,  472,  505,  505,  446,  445,  505,  485,  505,  473,
      505,  444,  443,  442,  441,  440,  439,  438,  437,  436,

      435,  434,  433,  432,  486,  431,  430,  421,  494,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   94,  420,  419,
      418,   94,   94,   95,  417,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   96,  416,  415,   96,   96,
       96,   96,   96,   96,   96,   96,   96,  133,  133,  133,
      133,  137,  137,  139,  139,  192,  414,  413,  412,  192,

      192,  192,  192,  192,  192,  192,  192,  200,  411,  200,
      200,  200,  410,  200,  200,  200,  200,  200,  200,  202,
      409,  202,  202,  202,  408,  202,  202,  202,  202,  202,
      202,  204,  407,  204,  204,  204,  406,  204,  204,  204,
      204,  204,  204,  206,  206,  207,  207,  207,  207,  244,
      244,  244,  244,  246,  246,  246,  246,  246,  310,  310,
      310,  310,  240,  240,  240,  336,  336,  405,  404,  403,
      402,  401,  400,  399,  398,  397,  396,  395,  394,  393,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,

      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  247,  339,  334,
      321,  315,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  280,  279,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  268,  267,  266,  262,  261,
      260,  257,  254,  253,  252,  251,  250,  247,  245,  243,
      242,  235,  224,  205,  203,  201,  186,  181,  180,  179,
      178,  177,  165,  159,  142,  138,  136,  135,  134,  132,
      131,  127,  119,  118,  117,   93,   92,  505,   91,   91,
       90,   90,   17,  505,  505,  505,  505,  505,  505,  505,

      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505
    } ;

static const flex_int16_t yy_chk[981] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,   32,
        3,    4,    4,  503,    4,    5,    5,    7,    5,    6,

        6,    8,    6,    9,   10,   11,    7,   49,   12,   32,
        8,   49,    9,   10,   11,   46,    3,   12,   46,   50,
        4,   50,  502,   48,    5,   36,   52,   33,    6,   33,
       33,   33,   33,   52,   36,   36,   48,   51,   33,  501,
       34,   33,   34,   34,   34,   34,   53,   51,  140,   54,
       53,   34,   33,   57,   56,   51,  146,   54,  140,  148,
       59,   33,   54,   56,   59,   34,  499,   56,   57,   33,
      146,    3,  493,   59,  148,    4,  336,   59,   59,    5,
      337,    7,   59,    6,  490,    8,   96,    9,   10,   11,
      489,   74,   12,   25,   74,   74,   60,   25,  336,   60,

       25,   25,  337,   25,   25,   25,  488,   60,   99,   96,
       60,   25,   25,   25,   60,   66,   66,   74,   66,   68,
       25,   68,   25,   68,   68,   68,   77,   66,   25,   77,
       77,   99,   97,   25,   74,  101,   25,   25,  100,   74,
      103,   25,  100,   25,  108,  484,   25,   97,  109,  102,
       25,  101,   77,  104,  482,   97,  102,  110,  101,  104,
      105,  100,  106,  103,  111,  112,  113,  108,  104,   77,
      114,  109,  102,  115,   77,  105,  104,  106,  479,  153,
      110,  476,  153,  105,  109,  106,  170,  111,  112,  113,
      126,  126,  126,  114,  153,  475,  115,  110,  116,  170,

      208,  116,  116,  474,  116,  111,  112,  188,  188,  188,
      114,  469,  113,  116,  115,  467,  113,  122,  122,  122,
      122,  116,  123,  208,  123,  123,  123,  123,  465,  124,
      211,  124,  213,  123,  124,  124,  124,  124,  125,  464,
      125,  125,  125,  125,  190,  190,  190,  123,  125,  125,
      191,  191,  214,  211,  219,  213,  218,  463,  462,  125,
      125,  125,  125,  125,  125,  189,  221,  189,  223,  226,
      189,  230,  218,  227,  228,  214,  189,  219,  229,  218,
      189,  189,  189,  189,  232,  231,  233,  234,  317,  221,
      461,  223,  226,  459,  230,  457,  227,  228,  323,  326,

      230,  229,  226,  456,  240,  228,  455,  232,  231,  233,
      234,  317,  449,  230,  448,  447,  226,  240,  227,  444,
      232,  323,  326,  229,  231,  236,  236,  236,  236,  233,
      237,  237,  237,  237,  236,  238,  238,  238,  238,  240,
      442,  239,  239,  239,  239,  241,  241,  241,  236,  239,
      239,  322,  327,  325,  328,  329,  331,  330,  332,  378,
      239,  239,  239,  239,  239,  239,  427,  386,  451,  380,
      384,  440,  383,  439,  322,  327,  325,  328,  329,  331,
      330,  332,  378,  385,  322,  325,  438,  329,  330,  427,
      386,  451,  380,  384,  335,  383,  335,  331,  328,  335,

      335,  335,  335,  338,  383,  338,  385,  386,  338,  338,
      338,  338,  380,  384,  388,  388,  388,  388,  423,  385,
      389,  389,  389,  389,  390,  424,  390,  425,  426,  390,
      390,  390,  390,  391,  391,  391,  391,  392,  392,  392,
      392,  423,  428,  428,  428,  428,  450,  437,  424,  452,
      425,  426,  429,  429,  429,  429,  453,  470,  436,  472,
      473,  426,  423,  485,  435,  486,  433,  494,  432,  450,
      424,  425,  452,  431,  430,  419,  416,  415,  450,  453,
      470,  452,  472,  473,  414,  413,  485,  470,  486,  453,
      494,  411,  410,  409,  408,  407,  406,  405,  404,  403,

      402,  398,  397,  396,  472,  394,  393,  376,  485,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  510,  375,  374,
      373,  510,  510,  511,  371,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  512,  367,  366,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  513,  513,  513,
      513,  514,  514,  515,  515,  516,  365,  364,  363,  516,

      516,  516,  516,  516,  516,  516,  516,  517,  362,  517,
      517,  517,  361,  517,  517,  517,  517,  517,  517,  518,
      360,  518,  518,  518,  359,  518,  518,  518,  518,  518,
      518,  519,  358,  519,  519,  519,  357,  519,  519,  519,
      519,  519,  519,  520,  520,  521,  521,  521,  521,  522,
      522,  522,  522,  523,  523,  523,  523,  523,  524,  524,
      524,  524,  525,  525,  525,  526,  526,  355,  354,  353,
      352,  351,  350,  348,  347,  345,  344,  341,  340,  339,
      293,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  277,  276,  275,  273,  269,  268,

      267,  265,  264,  263,  262,  261,  260,  259,  258,  257,
      255,  254,  253,  252,  251,  250,  248,  246,  245,  235,
      224,  216,  187,  180,  179,  178,  177,  176,  175,  174,
      173,  172,  171,  169,  168,  167,  166,  165,  164,  163,
      162,  161,  159,  158,  157,  156,  155,  154,  151,  150,
      149,  147,  145,  144,  143,  142,  141,  139,  138,  136,
      128,  120,  107,   88,   84,   80,   67,   65,   64,   63,
       62,   61,   58,   55,   47,   44,   43,   41,   40,   38,
       37,   35,   31,   30,   28,   23,   21,   17,   16,   15,
       14,   13,  505,  505,  505,  505,  505,  505,  505,  505,

      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Guido Tack <guido.tack@monash.edu>
 */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
#if defined __GNUC__
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wdeprecated"
#elif defined _MSC_VER
#pragma warning(push, 1)
#endif

namespace MiniZinc{ class ParserLocation; }
#define YYLTYPE MiniZinc::ParserLocation
#define YYLTYPE_IS_DECLARED 1
#define YYLTYPE_IS_TRIVIAL 0

#include <minizinc/parser.hh>

namespace MiniZinc {

  int utf8len(const char* s) {
    int l=0;
    for (int i=0; s[i] != '\0'; i++)
      if ((s[i] & 0xc0) != 0x80)
        l++;
    return l;
  }

  int yy_input_proc(char* buf, int size, yyscan_t yyscanner);
}

#define YY_INPUT(buf, result, max_size) \
  result = ::MiniZinc::yy_input_proc(buf, max_size, yyscanner);

#define YY_USER_ACTION \
  { MiniZinc::ParserState* parm =  \
      static_cast<MiniZinc::ParserState*>(yyget_extra(yyscanner)); \
    yylloc->firstLine(yylloc->lastLine()); \
    yylloc->firstColumn(yylloc->lastColumn()+1); \
    if(parm->hadNewline) { \
      parm->hadNewline=false; \
      parm->lineStartPos += parm->nTokenNextStart; \
      parm->nTokenNextStart=1; \
      yylloc->lastLine(yylloc->lastLine()+1); \
      yylloc->firstLine(yylloc->lastLine()); \
      yylloc->firstColumn(1); \
    } \
    if(yytext[0] == '\n') { \
      parm->hadNewline=true; \
      parm->nTokenNextStart+=0; \
    } else { \
      parm->nTokenNextStart+=yyleng; \
    } \
    yylloc->lastColumn(yylloc->firstColumn()+::MiniZinc::utf8len(yytext)-1); \
  }

namespace MiniZinc {
  
  bool hexstrtointval(const char* s, long long int& v) {
    std::istringstream iss(s);
    iss >> std::hex >> v;
    return !iss.fail();
  }

  bool octstrtointval(const char* s, long long int& v) {
    std::istringstream iss(s);
    iss >> std::oct >> v;
    return !iss.fail();
  }

  bool fast_strtointval(const char* s, long long int& v) {
    MiniZinc::IntVal x = 0;
    try {
      for (; *s != '\0'; ++s) {
        x = (x*10) + (*s - '0');
      }
    } catch (MiniZinc::ArithmeticError&) {
      return false;
    }
    v = x.toInt();
    return true;
  }

  bool strtofloatval(const char* s, double& v) {
    std::istringstream iss(s);
    iss >> v;
    return !iss.fail();
  }

  void clearBuffer(void* parm) {
    MiniZinc::ParserState* pp =
      static_cast<MiniZinc::ParserState*>(parm);
    pp->stringBuffer = "";
  }

  void appendBufferString(void* parm, const char* s) {
    MiniZinc::ParserState* pp =
    static_cast<MiniZinc::ParserState*>(parm);
    pp->stringBuffer += s;
  }

  void appendBufferChar(void* parm, char s) {
    MiniZinc::ParserState* pp =
    static_cast<MiniZinc::ParserState*>(parm);
    pp->stringBuffer += s;
  }

  char* bufferData(void* parm) {
    MiniZinc::ParserState* pp =
      static_cast<MiniZinc::ParserState*>(parm);
    return strdup(pp->stringBuffer.c_str());
  }
}

#define INITIAL 0
#define string 1
#define string_quote 2
#define multilinecomment 3
#define doccomment 4
#define doccomment_file 5
#define bracket_exp 6
#define quoted_exp 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 506 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 893 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ return MZN_INVALID_NULL; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ /* ignore whitespace */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ yy_push_state(doccomment,yyscanner); ::MiniZinc::clearBuffer(yyget_extra(yyscanner)); }
	YY_BREAK

case 5:
YY_RULE_SETUP
{ yylval->sValue = ::MiniZinc::bufferData(yyget_extra(yyscanner));
                    yy_pop_state(yyscanner); return MZN_DOC_COMMENT; }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ ::MiniZinc::appendBufferString(yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ ::MiniZinc::appendBufferString(yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
{ ::MiniZinc::appendBufferString(yyget_extra(yyscanner), yytext); }
	YY_BREAK

case 9:
YY_RULE_SETUP
{ yy_push_state(doccomment_file,yyscanner); ::MiniZinc::clearBuffer(yyget_extra(yyscanner)); }
	YY_BREAK

case 10:
YY_RULE_SETUP
{ yylval->sValue = ::MiniZinc::bufferData(yyget_extra(yyscanner));
    yy_pop_state(yyscanner); return MZN_DOC_FILE_COMMENT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ ::MiniZinc::appendBufferString(yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ ::MiniZinc::appendBufferString(yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{ ::MiniZinc::appendBufferString(yyget_extra(yyscanner), yytext); }
	YY_BREAK

case 14:
YY_RULE_SETUP
{ yy_push_state(multilinecomment,yyscanner); }
	YY_BREAK

case 15:
YY_RULE_SETUP
{ yy_pop_state(yyscanner); }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{ }
	YY_BREAK

case 19:
YY_RULE_SETUP
{ return MZN_LEFT_BRACKET; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return MZN_LEFT_2D_BRACKET; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return MZN_RIGHT_BRACKET; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return MZN_RIGHT_2D_BRACKET; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ /* ignore comments */ }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ yylval->iValue = 1; return MZN_BOOL_LITERAL; }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ yylval->iValue = 0; return MZN_BOOL_LITERAL; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
                  if (::MiniZinc::strtofloatval(yytext, yylval->dValue))
                  return MZN_FLOAT_LITERAL;
                  else
                  return MZN_INVALID_FLOAT_LITERAL;
                }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
                    if (::MiniZinc::hexstrtointval(yytext+2, yylval->iValue))
                      return MZN_INTEGER_LITERAL;
                    else
                      return MZN_INVALID_INTEGER_LITERAL;
                }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
                  if (::MiniZinc::octstrtointval(yytext+2, yylval->iValue))
                    return MZN_INTEGER_LITERAL;
                  else
                    return MZN_INVALID_INTEGER_LITERAL;
                }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
                  if (::MiniZinc::fast_strtointval(yytext, yylval->iValue))
                    return MZN_INTEGER_LITERAL;
                  else
                    return MZN_INVALID_INTEGER_LITERAL;
                }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
                  if (::MiniZinc::strtofloatval(yytext, yylval->dValue))
                  return MZN_FLOAT_LITERAL;
                  else
                  return MZN_INVALID_FLOAT_LITERAL;
                }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
                    if (::MiniZinc::strtofloatval(yytext, yylval->dValue))
                      return MZN_FLOAT_LITERAL;
                    else
                      return MZN_INVALID_FLOAT_LITERAL;
                  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
                    if (::MiniZinc::strtofloatval(yytext, yylval->dValue))
                      return MZN_FLOAT_LITERAL;
                    else
                      return MZN_INVALID_FLOAT_LITERAL;
                  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
                    return *yytext; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return MZN_DOTDOT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return MZN_DOTDOT_QUOTED; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return MZN_COLONCOLON; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return MZN_UNDERSCORE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return MZN_ANN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return MZN_ANNOTATION; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return MZN_ANY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return MZN_ARRAY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return MZN_BOOL; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return MZN_CASE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return MZN_CONSTRAINT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return MZN_DEFAULT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return MZN_IDIV; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return MZN_IDIV_QUOTED; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return MZN_DIFF; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return MZN_DIFF_QUOTED; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return MZN_ELSE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return MZN_ELSEIF; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return MZN_ENDIF; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return MZN_ENUM; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return MZN_FLOAT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return MZN_FUNCTION; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return MZN_IF; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return MZN_INCLUDE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return MZN_INFINITY; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return MZN_INTERSECT; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return MZN_INTERSECT_QUOTED; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return MZN_IN; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return MZN_IN_QUOTED; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return MZN_INT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return MZN_LET; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return MZN_LIST; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ yylval->bValue = false; return MZN_MAXIMIZE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ yylval->bValue = true; return MZN_MINIMIZE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return MZN_MOD; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return MZN_MOD_QUOTED; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return MZN_NOT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return MZN_NOT_QUOTED; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return MZN_OF; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return MZN_OUTPUT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return MZN_OPT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return MZN_PAR; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return MZN_PREDICATE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ return MZN_RECORD; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ return MZN_SATISFY; }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ return MZN_SET; }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ return MZN_SOLVE; }
	YY_BREAK
case 81:
YY_RULE_SETUP
{ return MZN_STRING; }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ return MZN_SUBSET; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ return MZN_SUBSET_QUOTED; }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ return MZN_SUPERSET; }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ return MZN_SUPERSET_QUOTED; }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ return MZN_SYMDIFF; }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ return MZN_SYMDIFF_QUOTED; }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ return MZN_TEST; }
	YY_BREAK
case 89:
YY_RULE_SETUP
{ return MZN_THEN; }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ return MZN_TUPLE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ return MZN_TYPE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ return MZN_UNION; }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ return MZN_UNION_QUOTED; }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ return MZN_VAR; }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ return MZN_VARIANT_RECORD; }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ return MZN_WHERE; }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ return MZN_XOR; }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ return MZN_XOR_QUOTED; }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ return MZN_PLUS; }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ return MZN_PLUS_QUOTED; }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ return MZN_MINUS; }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ return MZN_MINUS_QUOTED; }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ return MZN_MULT; }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ return MZN_MULT_QUOTED; }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ return MZN_DIV; }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ return MZN_DIV_QUOTED; }
	YY_BREAK
case 107:
YY_RULE_SETUP
{ return MZN_POW_MINUS1; }
	YY_BREAK
case 108:
YY_RULE_SETUP
{ return MZN_POW; }
	YY_BREAK
case 109:
YY_RULE_SETUP
{ return MZN_POW_QUOTED; }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ return MZN_PLUSPLUS; }
	YY_BREAK
case 111:
YY_RULE_SETUP
{ return MZN_PLUSPLUS_QUOTED; }
	YY_BREAK
case 112:
YY_RULE_SETUP
{ return MZN_ABSENT; }
	YY_BREAK
case 113:
YY_RULE_SETUP
{ return MZN_LE; }
	YY_BREAK
case 114:
YY_RULE_SETUP
{ return MZN_LE_QUOTED; }
	YY_BREAK
case 115:
YY_RULE_SETUP
{ return MZN_LQ; }
	YY_BREAK
case 116:
YY_RULE_SETUP
{ return MZN_LQ_QUOTED; }
	YY_BREAK
case 117:
YY_RULE_SETUP
{ return MZN_GR; }
	YY_BREAK
case 118:
YY_RULE_SETUP
{ return MZN_GR_QUOTED; }
	YY_BREAK
case 119:
YY_RULE_SETUP
{ return MZN_GQ; }
	YY_BREAK
case 120:
YY_RULE_SETUP
{ return MZN_GQ_QUOTED; }
	YY_BREAK
case 121:
YY_RULE_SETUP
{ return MZN_EQ; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{ return MZN_EQ_QUOTED; }
	YY_BREAK
case 123:
YY_RULE_SETUP
{ return MZN_EQ; }
	YY_BREAK
case 124:
YY_RULE_SETUP
{ return MZN_EQ_QUOTED; }
	YY_BREAK
case 125:
YY_RULE_SETUP
{ return MZN_NQ; }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ return MZN_NQ_QUOTED; }
	YY_BREAK
case 127:
YY_RULE_SETUP
{ return MZN_IMPL; }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ return MZN_IMPL_QUOTED; }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ return MZN_RIMPL; }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ return MZN_RIMPL_QUOTED; }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ return MZN_EQUIV; }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ return MZN_EQUIV_QUOTED; }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ return MZN_OR; }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ return MZN_OR_QUOTED; }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ return MZN_AND; }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ return MZN_AND_QUOTED; }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ return MZN_WEAK_PLUS; }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ return MZN_WEAK_MULT; }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ return MZN_WEAK_EQ; }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ return MZN_WEAK_MINUS; }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
                    yylval->sValue = strdup(yytext+1);
                    yylval->sValue[strlen(yytext)-2] = 0;
                    return MZN_IDENTIFIER; }
	YY_BREAK
case 142:
YY_RULE_SETUP
{ yylval->sValue = strdup(yytext); return MZN_IDENTIFIER; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
                    yylval->sValue = strdup(yytext); return MZN_IDENTIFIER; }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
                    yylval->sValue = strdup(yytext); return MZN_IDENTIFIER; }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
                    MiniZinc::ParserState* parm =
                    static_cast<MiniZinc::ParserState*>(yyget_extra(yyscanner));
                    if (parm->isFlatZinc) {
                      yylval->sValue = strdup(yytext); return MZN_IDENTIFIER;
                    } else {
                      return FLATZINC_IDENTIFIER;
                    }
                    }
	YY_BREAK
case 146:
YY_RULE_SETUP
{ yylval->sValue = strdup("forall"); return MZN_IDENTIFIER; }
	YY_BREAK
case 147:
YY_RULE_SETUP
{ yylval->sValue = strdup("exists"); return MZN_IDENTIFIER; }
	YY_BREAK
case 148:
YY_RULE_SETUP
{ return MZN_IN; }
	YY_BREAK
case 149:
YY_RULE_SETUP
{ return MZN_SUBSET; }
	YY_BREAK
case 150:
YY_RULE_SETUP
{ return MZN_SUPERSET; }
	YY_BREAK
case 151:
YY_RULE_SETUP
{ return MZN_INFINITY; }
	YY_BREAK
case 152:
YY_RULE_SETUP
{ return MZN_NOT; }
	YY_BREAK
case 153:
YY_RULE_SETUP
{ return MZN_RIMPL; }
	YY_BREAK
case 154:
YY_RULE_SETUP
{ return MZN_IMPL; }
	YY_BREAK
case 155:
YY_RULE_SETUP
{ return MZN_EQUIV; }
	YY_BREAK
case 156:
YY_RULE_SETUP
{ return MZN_AND; }
	YY_BREAK
case 157:
YY_RULE_SETUP
{ return MZN_OR; }
	YY_BREAK
case 158:
YY_RULE_SETUP
{ return MZN_NQ; }
	YY_BREAK
case 159:
YY_RULE_SETUP
{ return MZN_LQ; }
	YY_BREAK
case 160:
YY_RULE_SETUP
{ return MZN_GQ; }
	YY_BREAK
case 161:
YY_RULE_SETUP
{ return MZN_UNION; }
	YY_BREAK
case 162:
YY_RULE_SETUP
{ return MZN_INTERSECT; }
	YY_BREAK
case 163:
YY_RULE_SETUP
{ return MZN_POW_MINUS1; }
	YY_BREAK
case 164:
YY_RULE_SETUP
{
  yylval->sValue = strdup(yytext+1); return MZN_TI_ENUM_IDENTIFIER; }
	YY_BREAK
case 165:
YY_RULE_SETUP
{
                    yylval->sValue = strdup(yytext+1); return MZN_TI_IDENTIFIER; }
	YY_BREAK
case 166:
YY_RULE_SETUP
{ yy_push_state(bracket_exp,yyscanner); return *yytext; }
	YY_BREAK
case 167:
YY_RULE_SETUP
{ yy_pop_state(yyscanner); return *yytext; }
	YY_BREAK
case 168:
YY_RULE_SETUP
{ yy_pop_state(yyscanner); yy_pop_state(yyscanner); yy_push_state(string_quote,yyscanner);
                  ::MiniZinc::clearBuffer(yyget_extra(yyscanner)); }
	YY_BREAK
case 169:
YY_RULE_SETUP
{ yy_push_state(string,yyscanner); ::MiniZinc::clearBuffer(yyget_extra(yyscanner)); }
	YY_BREAK
case 170:
YY_RULE_SETUP
{ ::MiniZinc::appendBufferString(yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 171:
YY_RULE_SETUP
{ ::MiniZinc::appendBufferChar(yyget_extra(yyscanner), '\n'); }
	YY_BREAK
case 172:
YY_RULE_SETUP
{ ::MiniZinc::appendBufferChar(yyget_extra(yyscanner), '\t'); }
	YY_BREAK
case 173:
YY_RULE_SETUP
{ ::MiniZinc::appendBufferChar(yyget_extra(yyscanner), yytext[1]); }
	YY_BREAK
case 174:
YY_RULE_SETUP
{ ::MiniZinc::appendBufferChar(yyget_extra(yyscanner), yytext[1]); }
	YY_BREAK
case 175:
YY_RULE_SETUP
{ yylval->sValue = ::MiniZinc::bufferData(yyget_extra(yyscanner));
                      yy_push_state(quoted_exp,yyscanner); return MZN_STRING_QUOTE_START; }
	YY_BREAK
case 176:
YY_RULE_SETUP
{ yylval->sValue = ::MiniZinc::bufferData(yyget_extra(yyscanner));
                      yy_push_state(quoted_exp,yyscanner); return MZN_STRING_QUOTE_MID; }
	YY_BREAK
case 177:
YY_RULE_SETUP
{ yylval->sValue = ::MiniZinc::bufferData(yyget_extra(yyscanner));
                      yy_pop_state(yyscanner); return MZN_STRING_LITERAL; }
	YY_BREAK
case 178:
YY_RULE_SETUP
{ yylval->sValue = ::MiniZinc::bufferData(yyget_extra(yyscanner));
                            yy_pop_state(yyscanner); return MZN_STRING_QUOTE_END; }
	YY_BREAK
case 179:
YY_RULE_SETUP
{ return (unsigned char)yytext[0]; }
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
{ return MZN_END_OF_LINE_IN_STRING; }
	YY_BREAK
case YY_STATE_EOF(string):
case YY_STATE_EOF(string_quote):
{ yy_pop_state(yyscanner); return MZN_UNTERMINATED_STRING; }
	YY_BREAK
case 181:
YY_RULE_SETUP
{
                    yylval->sValue = strdup(yytext+1);
                    yylval->sValue[strlen(yytext)-2] = 0; 
                    return MZN_QUOTED_IDENTIFIER; }
	YY_BREAK
case 182:
YY_RULE_SETUP
{ return (unsigned char)yytext[0]; }
	YY_BREAK
case 183:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(multilinecomment):
case YY_STATE_EOF(doccomment):
case YY_STATE_EOF(doccomment_file):
case YY_STATE_EOF(bracket_exp):
case YY_STATE_EOF(quoted_exp):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 87);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 506 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 87;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 506 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 505);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

namespace MiniZinc {
  int yy_input_proc(char* buf, int size, yyscan_t yyscanner) {
    MiniZinc::ParserState* parm =
      static_cast<MiniZinc::ParserState*>(yyget_extra(yyscanner));
    return parm->fillBuffer(buf, size);
    // work around warning that yyunput is unused
    yyunput (0,buf,yyscanner);
  }
}

