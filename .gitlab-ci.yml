stages:
  - build
  - test
  - trigger
  - bench

.download_bundle: &download_bundle
  - sh ${VENDOR_SCRIPT} minizinc-vendor master bundle:${MZNARCH} vendor.zip
  - unzip -q vendor.zip

.download_bundle_win: &download_bundle_win
  - sh %VENDOR_SCRIPT% minizinc-vendor master bundle:%MZNARCH% vendor.zip
  - unzip -q vendor.zip

variables:
  # CCache settings
  CCACHE_DIR: "$CI_PROJECT_DIR/.ccache"
  CCACHE_MAXSIZE: "100M"
  # MacOS deployment settings
  MACOSX_DEPLOYMENT_TARGET: "10.9"
  CMAKE_OSX_ARCHITECTURES: "x86_64;arm64"

default:
  interruptible: true

# ----------- Build MiniZinc -----------

.build:
  stage: build
  before_script:
    - bash download_vendor
  script:
    - cmake -S . -B build -G"$CMAKE_ARCH" -DCMAKE_BUILD_TYPE=Release -DBUILD_REF=$CI_PIPELINE_ID -DGecode_ROOT="$CI_PROJECT_DIR/vendor/gecode" -DOsiCBC_ROOT="$CI_PROJECT_DIR/vendor/cbc" -DCMAKE_INSTALL_PREFIX="$CI_PROJECT_DIR/minizinc"
    - cmake --build build --config Release --target install
  artifacts:
    paths: [minizinc/]
  cache:
    key: "$CI_JOB_STAGE:$CI_JOB_NAME"
    paths: [.ccache, vendor/]
  variables:
    CMAKE_C_COMPILER_LAUNCHER: "ccache"
    CMAKE_CXX_COMPILER_LAUNCHER: "ccache"
  only: [tags, merge_requests, pipelines, develop, master]

build:linux:
  extends: .build
  image: ghcr.io/minizinc/docker-build-environment:cpp
  variables:
    MZNARCH: "linux"
    CMAKE_ARCH: "Ninja"
  tags: [linux, docker]

build:linux-arm64:
  extends: .build
  image: ghcr.io/minizinc/docker-build-environment:cpp
  variables:
    MZNARCH: "linux-arm64"
    CMAKE_ARCH: "Ninja"
  tags: [linux-arm64]

build:musl:
  extends: .build
  image: ghcr.io/minizinc/docker-build-environment:alpine
  variables:
    MZNARCH: "musl"
    CMAKE_ARCH: "Ninja"
  tags: [linux, docker]

build:musl-arm64:
  extends: .build
  image: ghcr.io/minizinc/docker-build-environment:alpine
  variables:
    MZNARCH: "musl-arm64"
    CMAKE_ARCH: "Ninja"
  tags: [linux-arm64]

build:osx:
  extends: .build
  variables:
    MZNARCH: "osx"
    CMAKE_ARCH: "Ninja"
  tags: [osx, cmake, cpp]

build:win64:
  extends: .build
  variables:
    MZNARCH: "win64"
    CMAKE_ARCH: "Ninja"
    CMAKE_C_COMPILER_LAUNCHER: "buildcache"
    CMAKE_CXX_COMPILER_LAUNCHER: "buildcache"
    BUILDCACHE_DIR: "$CI_PROJECT_DIR/.ccache"
    BUILDCACHE_MAX_CACHE_SIZE: "104857600"
  script:
    - cmake -S . -B build -G"%CMAKE_ARCH%" -DCMAKE_BUILD_TYPE=Release -DBUILD_REF=%CI_PIPELINE_ID% -DGecode_ROOT="%CI_PROJECT_DIR%/vendor/gecode" -DOsiCBC_ROOT="%CI_PROJECT_DIR%/vendor/cbc" -DCMAKE_INSTALL_PREFIX="%CI_PROJECT_DIR%/minizinc"
    - cmake --build build --config Release --target install
  cache:
    key: "build_win64"
  tags: [win64, cmake, cpp, ninja, buildcache]

# ----------- Test Suite -----------

test:format:
  stage: test
  image: ghcr.io/minizinc/docker-build-environment:clang-tools
  script:
    - cmake -S . -B build -GNinja -DCLANG_FORMAT_EXECUTABLE="run-clang-format" -DCLANG_FORMAT_FLAGS="--color always"
    - cmake --build build --target format
  tags: [linux, docker]
  only:
    changes:
      - "**/*.{cpp,c,h,hh,hpp}"
      - .clang-format
    refs:
      - merge_requests
  needs: []

test:analyse:
  extends: .build
  stage: test
  image: ghcr.io/minizinc/docker-build-environment:clang-tools
  variables:
    MZNARCH: "musl"
    CMAKE_ARCH: "Ninja"
  script:
    - cmake -S . -B build -G"$CMAKE_ARCH" -DCMAKE_CXX_CLANG_TIDY="clang-tidy" -DCMAKE_BUILD_TYPE="Debug" -DGecode_ROOT="$CI_PROJECT_DIR/vendor/gecode" -DOsiCBC_ROOT="$CI_PROJECT_DIR/vendor/cbc"
    - cmake --build build --config Debug
  tags: [linux, docker]
  only:
    changes:
      - "**/*.{cpp,c,h,hh,hpp}"
      - .clang-tidy
    refs:
      - merge_requests
  needs: []

.tests:
  stage: test
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    MZN_SOLVER_PATH: "$CI_PROJECT_DIR/vendor/chuffed/share/minizinc/solvers/:$CI_PROJECT_DIR/vendor/gecode/share/minizinc/solvers/"
    MZN_TEST_TAGS_PRESENT: gecode_presolver,cbc,cplex,highs,scip,gurobi,xpress
  before_script:
    - *download_bundle
    - export PATH=$CI_PROJECT_DIR/minizinc/bin:$PATH
    - minizinc --solvers
    - cd tests
    - python3 -m venv env
    - source env/bin/activate
    - pip install -r requirements.txt
  after_script:
    - echo "Test results at https://minizinc.gitlab.io/-/minizinc/-/jobs/${CI_JOB_ID}/artifacts/tests/output/report.html"
  artifacts:
    when: always
    paths:
      - tests/output/
    reports:
      junit: tests/output/junit*.xml
  cache:
    key: "$CI_JOB_STAGE:$CI_JOB_NAME"
    paths: [.cache/pip, vendor.zip*]
  only: [merge_requests, pipelines, master]

# Linux specific config
.tests_linux:
  extends: .tests
  image: python:3.11
  variables:
    MZNARCH: "linux"
    LD_LIBRARY_PATH: "$CI_PROJECT_DIR/vendor/highs/lib64"
  tags: [linux, docker]
  dependencies: ["build:linux"]
  needs: ["build:linux"]

# OSX specific config
.tests_osx:
  extends: .tests
  variables:
    MZNARCH: "osx"
    DYLD_LIBRARY_PATH: "$CI_PROJECT_DIR/vendor/highs/lib"
  tags: [osx]
  dependencies: ["build:osx"]
  needs: ["build:osx"]

# Windows specific config
.tests_win64:
  extends: .tests
  variables:
    MZNARCH: "win64"
    MZN_SOLVER_PATH: "$CI_PROJECT_DIR/vendor/chuffed/share/minizinc/solvers/;$CI_PROJECT_DIR/vendor/gecode/share/minizinc/solvers/"
  before_script:
    - *download_bundle_win
    - set PATH=%CI_PROJECT_DIR%/minizinc/bin;%CI_PROJECT_DIR%/vendor/highs/bin;%PATH%
    - cd tests
    - python -m venv env
    - call env\Scripts\activate.bat
    - pip install -r requirements.txt
  after_script:
    - "echo Test results at https://minizinc.gitlab.io/-/minizinc/-/jobs/%CI_JOB_ID%/artifacts/tests/output/report.html"
  tags: [win64]
  dependencies: ["build:win64"]
  needs: ["build:win64"]
  cache:
    key: test_win64

.tests_fast:
  script:
    - pytest

.tests_full:
  script:
    - pytest --all-suites
  when: manual

test:linux:fast:
  extends: [.tests_linux, .tests_fast]
  artifacts:
    expose_as: test-linux

test:linux:full:
  extends: [.tests_linux, .tests_full]

test:osx:fast:
  extends: [.tests_osx, .tests_fast]
  artifacts:
    expose_as: test-osx

test:osx:full:
  extends: [.tests_osx, .tests_full]

test:win64:fast:
  extends: [.tests_win64, .tests_fast]
  cache:
    key: test_win64_fast
  artifacts:
    expose_as: test-win64

test:win64:full:
  extends: [.tests_win64, .tests_full]
  cache:
    key: test_win64_full

# ------------ Benchmarking -----------

.flatten_benchmark:
  stage: bench
  variables:
    MZNARCH: linux
    # Run on SLURM using srun
    FLATTEN_PREFIX: srun -w critical001 --nice --mem=8192 -t 10
    PARALLEL_JOBS: "-1" # All in parallel, SLURM manages queue
  tags: [slurm]
  dependencies: ["build:linux"]
  needs: ["build:linux"]
  before_script:
    - cd tests/flattening
    - mkdir -p results
    # Download instances to benchmark
    - curl --retry 10 --location --silent https://gitlab.com/-/snippets/2095682/raw/master/instances.csv | tr -d '\r' > instances.csv
    - git clone https://github.com/minizinc/minizinc-benchmarks.git
  script:
    # Run benchmarks
    - python3 flatten.py --minizinc="$CI_PROJECT_DIR/minizinc/bin/minizinc" --prefix-args="$FLATTEN_PREFIX" --args="-G $MZNLIB" --parallel="$PARALLEL_JOBS" instances.csv results/stats.csv
  artifacts:
    paths:
      - tests/flattening/results/
    expose_as: $CI_JOB_NAME
  cache:
    key: "$CI_JOB_STAGE:$CI_JOB_NAME"
    paths: [.cache/pip]

# bench:std:
#   extends: .flatten_benchmark
#   variables:
#     MZNLIB: std
#   artifacts:
#     expose_as: bench-std
#   only: [tags, master, develop]
#   allow_failure: true

# bench:linear:
#   extends: .flatten_benchmark
#   variables:
#     MZNLIB: linear
#   artifacts:
#     expose_as: bench-linear
#   only: [tags, master, develop]
#   allow_failure: true

bench:std:manual:
  extends: .flatten_benchmark
  variables:
    MZNLIB: std
  artifacts:
    expose_as: bench-std-manual
  # only: [merge_requests, pipelines]
  only: [merge_requests, pipelines, tags, master, develop]
  when: manual

bench:linear:manual:
  extends: .flatten_benchmark
  variables:
    MZNLIB: linear
  artifacts:
    expose_as: bench-linear-manual
  # only: [merge_requests, pipelines]
  only: [merge_requests, pipelines, tags, master, develop]
  when: manual

# ----------- Documentation -----------

documentation:
  stage: test
  image: ghcr.io/minizinc/docker-build-environment:sphinx
  variables:
    MZNARCH: "linux"
  before_script:
    - *download_bundle
  script:
    - cp $CI_PROJECT_DIR/vendor/gecode/share/minizinc/gecode/gecode.mzn $CI_PROJECT_DIR/share/minizinc/std/
    - cp $CI_PROJECT_DIR/vendor/chuffed/share/minizinc/chuffed/chuffed.mzn $CI_PROJECT_DIR/share/minizinc/std/
    - echo 'include "globals.mzn"; include "gecode.mzn"; include "chuffed.mzn"; include "ide/vis.mzn"; include "experimental/all.mzn";' > $CI_PROJECT_DIR/share/minizinc/std/all.mzn
    - ./minizinc/bin/mzn2doc --rst-output --include-stdlib --output-base $CI_PROJECT_DIR/docs/en/lib $CI_PROJECT_DIR/share/minizinc/std/all.mzn
    - ./minizinc/bin/mzn2doc --rst-output --include-stdlib --output-base $CI_PROJECT_DIR/docs/chi/lib $CI_PROJECT_DIR/share/minizinc/std/all.mzn
    - cd $CI_PROJECT_DIR/docs
    - make BUILDDIR="en/_build" html latexpdf
    - make SPHINXOPTS="-D language=zh_CN" BUILDDIR="chi/_build" html latexpdf
    - MZNVERSION=$(python3 "$CI_PROJECT_DIR/docs/utils/minizinc_version.py")
    - mkdir -p $CI_PROJECT_DIR/docs-deploy/doc-${MZNVERSION}/en
    - mkdir -p $CI_PROJECT_DIR/docs-deploy/doc-${MZNVERSION}/chi
    - cp -r $CI_PROJECT_DIR/docs/en/_build/html/* $CI_PROJECT_DIR/docs-deploy/doc-${MZNVERSION}/en/
    - cp $CI_PROJECT_DIR/docs/en/_build/latex/MiniZinc.pdf $CI_PROJECT_DIR/docs-deploy/doc-${MZNVERSION}/en/MiniZinc\ Handbook.pdf
    - cp -r $CI_PROJECT_DIR/docs/chi/_build/html/* $CI_PROJECT_DIR/docs-deploy/doc-${MZNVERSION}/chi/
    - cp $CI_PROJECT_DIR/docs/chi/_build/latex/MiniZinc.pdf $CI_PROJECT_DIR/docs-deploy/doc-${MZNVERSION}/chi/MiniZinc\ Handbook.pdf
    - python3 "$CI_PROJECT_DIR/docs/utils/gen_redirects.py" "$CI_PROJECT_DIR/docs-deploy/doc-${MZNVERSION}" "$CI_PROJECT_DIR/docs-deploy/doc-latest"
  artifacts:
    paths:
      - docs-deploy/
    expose_as: documentation
  tags:
    - linux
    - docker
  only: [tags, merge_requests, pipelines, develop, master]
  dependencies: ["build:linux"]
  needs: ["build:linux"]

# ----------- Trigger FindMUS pipeline -----------

trigger:findmus:
  stage: trigger
  trigger:
    project: minizinc/FindMUS
    branch: develop
  only: [develop]
